[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Josiah Parry. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Parry J (2023). rsgeo: Interface Rust's 'geo-types' Library. R package version 0.0.0.9000.","code":"@Manual{,   title = {rsgeo: An Interface to Rust's 'geo-types' Library},   author = {Josiah Parry},   year = {2023},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"rsgeo","dir":"","previous_headings":"","what":"An Interface to Rusts geo-types' Library","title":"An Interface to Rusts geo-types' Library","text":"rsgeo interface Rust libraries geo-types geo. geo-types implements pure rust geometry primitives. geo library adds additional algorithm functionalities top geo-types. package lets harness speed, safety, memory efficiency libraries. geo-types support Z M dimensions. support CRS moment. Create geometries sf objects Cast geometries sf Calculate unsigned area polygons. Find centroids Extract points matrix Plot polygons centroids  Calculate distance matrix Simplify geometry  Union geometries union_geoms()  Find closest point geometry  Find haversine destination point, bearing, distance.  Find intermediate point.  Utilize chaikin smoothing algorithm 5 iterations.  Find extreme coordinates extreme_coords()","code":"# remotes::install_github(\"josiahparry/rsgeo\") library(rsgeo) # get geometry from sf data(guerry, package = \"sfdep\")  polys <- guerry[[\"geometry\"]] |>   sf::st_cast(\"POLYGON\")  # cast to rust geo-types rs_polys <- as_rsgeom(polys)  head(rs_polys) #> (Polygon { exterior: LineString([Coord { x: 801150.0, y: 2092615.0 }, Coor.... #> (Polygon { exterior: LineString([Coord { x: 729326.0, y: 2521619.0 }, Coor.... #> (Polygon { exterior: LineString([Coord { x: 710830.0, y: 2137350.0 }, Coor.... #> (Polygon { exterior: LineString([Coord { x: 882701.0, y: 1920024.0 }, Coor.... #> (Polygon { exterior: LineString([Coord { x: 886504.0, y: 1922890.0 }, Coor.... #> (Polygon { exterior: LineString([Coord { x: 747008.0, y: 1925789.0 }, Coor.... as_sf(rs_polys) #> Geometry set for 116 features  #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441 #> CRS:           NA #> First 5 geometries: #> POLYGON ((801150 2092615, 800669 2093190, 80068... #> POLYGON ((729326 2521619, 729320 2521230, 72928... #> POLYGON ((710830 2137350, 711746 2136617, 71243... #> POLYGON ((882701 1920024, 882408 1920733, 88177... #> POLYGON ((886504 1922890, 885733 1922978, 88547... bench::mark(   rust = unsigned_area(rs_polys),   sf = sf::st_area(polys),   check = FALSE ) #> # A tibble: 2 × 6 #>   expression      min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 rust        82.49µs 100.16µs     9759.    3.82KB     0    #> 2 sf           1.32ms   1.48ms      678.  745.35KB     8.42 bench::mark(   centroids(rs_polys),   sf::st_centroid(polys),   check = FALSE ) #> # A tibble: 2 × 6 #>   expression                  min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>             <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 centroids(rs_polys)    207.42µs    285µs     3261.    3.81KB    10.2  #> 2 sf::st_centroid(polys)   2.44ms    2.6ms      381.  756.52KB     6.39 rs_polys |>    centroids() |>    as.matrix() |>    head() #>          [,1]    [,2] #> [1,] 832852.3 2126601 #> [2,] 688485.6 2507622 #> [3,] 665510.1 2155203 #> [4,] 912995.8 1908303 #> [5,] 911433.9 1970312 #> [6,] 765421.3 1974521 plot(rs_polys) plot(centroids(rs_polys), add = TRUE) pnts <- centroids(rs_polys) pnts_sf <- as_sf(pnts)  bench::mark(   rust = euclidean_distance_matrix(pnts, pnts),   sf = sf::st_distance(pnts_sf, pnts_sf) ) #> # A tibble: 2 × 6 #>   expression      min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 rust        254.2µs 274.25µs     3599.     108KB     8.55 #> 2 sf           2.94ms   3.08ms      324.     352KB     2.03 x <- rs_polys[[37]] x_simple <- simplify_geom(x, 5000)  plot(x) plot(x_simple, add = TRUE) bench::mark(   rust = simplify_geoms(rs_polys, 500),   sf = sf::st_simplify(polys, FALSE, 500),   check = FALSE ) #> # A tibble: 2 × 6 #>   expression      min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 rust         5.44ms   5.58ms      179.       4KB     0    #> 2 sf            8.1ms   8.49ms      118.    1.23MB     4.21 plot(union_geoms(rs_polys)) close_pnt <- closest_point(   rs_polys[[1]],    geom_point(800000, 2090000) )  plot(rs_polys[[1]]) plot(close_pnt, pch = 15, add = TRUE) bench::mark(   rust = haversine_destination(geom_point(10, 10), 45, 10000),   Cpp = geosphere::destPoint(c(10, 10), 45, 10000),   check = FALSE ) #> # A tibble: 2 × 6 #>   expression      min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 rust         2.38µs   3.57µs   271097.    3.22KB      0   #> 2 Cpp         16.44µs  17.79µs    51747.   11.45MB     31.1 origin <- geom_point(10, 10)  destination <- haversine_destination(origin, 45, 10000)  plot(origin) plot(destination, col = \"blue\", add = TRUE) middle <- haversine_intermediate(origin, destination, 1/2)  plot(origin) plot(destination, add = TRUE, col = \"red\") plot(middle, add = TRUE, col = \"blue\") region <- rs_polys[[2]] plot(chaikin_smoothing(region, 5)) france <- union_geoms(rs_polys)   plot(france) plot(extreme_coords(france), add = TRUE, pch = 15)"},{"path":"/index.html","id":"notes","dir":"","previous_headings":"","what":"Notes","title":"An Interface to Rusts geo-types' Library","text":"Right now plotting done using sf first casting R native objects assigned appropriate sf class. object plotted sf","code":""},{"path":"/reference/as_rsgeom.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert sf object to a Rust geo_type — as_rsgeom","title":"Convert sf object to a Rust geo_type — as_rsgeom","text":"Convert sf object Rust geo_type","code":""},{"path":"/reference/as_rsgeom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert sf object to a Rust geo_type — as_rsgeom","text":"","code":"as_rsgeom(x)"},{"path":"/reference/as_rsgeom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert sf object to a Rust geo_type — as_rsgeom","text":"x sfc sfg object","code":""},{"path":"/reference/as_sfg.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert geo-type to sfg or sfc object — as_sfg","title":"Convert geo-type to sfg or sfc object — as_sfg","text":"Convert geo-type sfg sfc object","code":""},{"path":"/reference/as_sfg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert geo-type to sfg or sfc object — as_sfg","text":"","code":"as_sfg(x)"},{"path":"/reference/as_sfg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert geo-type to sfg or sfc object — as_sfg","text":"x rust geo-type","code":""},{"path":"/reference/bearing.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Bearing — bearing","title":"Calculate Bearing — bearing","text":"Calculate Bearing","code":""},{"path":"/reference/bearing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Bearing — bearing","text":"","code":"bearing(x, y)  bearings(x, y)"},{"path":"/reference/bearing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Bearing — bearing","text":"x object class point y bearing() object class point. bearings() object class rs_POINT","code":""},{"path":"/reference/bearing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Bearing — bearing","text":"vector doubles calculated bearing x y","code":""},{"path":"/reference/boundaries.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Geometric Boundaries — bounding_box","title":"Compute Geometric Boundaries — bounding_box","text":"Compute Geometric Boundaries","code":""},{"path":"/reference/boundaries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Geometric Boundaries — bounding_box","text":"","code":"bounding_box(x)  bounding_rectangle(x)  bounding_rectangles(x)  concave_hull(x, concavity)  concave_hulls(x, concavity)  convex_hull(x)  convex_hulls(x)"},{"path":"/reference/boundaries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Geometric Boundaries — bounding_box","text":"x rust geometry either scalar vector functions ending s. See \"Details\" .","code":""},{"path":"/reference/boundaries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Geometric Boundaries — bounding_box","text":"bounding_box() returns named list x y maximums minimums bounding_rectangle() returns polygon bounding rectangle convex_hull() returns polygon convex hull concave_hull() returns polygon specified concavity function, exception bounding_box() plural version ending s vectorized x.","code":""},{"path":"/reference/cast_geoms.html","id":null,"dir":"Reference","previous_headings":"","what":"Cast to another geometry type — cast_geoms","title":"Cast to another geometry type — cast_geoms","text":"Cast another geometry type","code":""},{"path":"/reference/cast_geoms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cast to another geometry type — cast_geoms","text":"","code":"cast_geoms(x, to)  expand_geoms(x, ...)"},{"path":"/reference/centroid.html","id":null,"dir":"Reference","previous_headings":"","what":"Find centroid — centroid","title":"Find centroid — centroid","text":"Find centroid","code":""},{"path":"/reference/centroid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find centroid — centroid","text":"","code":"centroid(x)  centroids(x)"},{"path":"/reference/centroid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find centroid — centroid","text":"x object class point","code":""},{"path":"/reference/chaikin_smoothing.html","id":null,"dir":"Reference","previous_headings":"","what":"Chaikin Smoothing — chaikin_smoothing","title":"Chaikin Smoothing — chaikin_smoothing","text":"Chaikin Smoothing","code":""},{"path":"/reference/chaikin_smoothing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chaikin Smoothing — chaikin_smoothing","text":"","code":"chaikin_smoothing(x, niter)"},{"path":"/reference/closest_point.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the closest point — closest_point","title":"Find the closest point — closest_point","text":"Find closest point","code":""},{"path":"/reference/closest_point.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the closest point — closest_point","text":"","code":"closest_point(x, y)"},{"path":"/reference/closest_point.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the closest point — closest_point","text":"x single geometry y point","code":""},{"path":"/reference/combine_geoms.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine geometries — combine_geoms","title":"Combine geometries — combine_geoms","text":"Combine geometries","code":""},{"path":"/reference/combine_geoms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine geometries — combine_geoms","text":"","code":"combine_geoms(x)  union_geoms(x)"},{"path":"/reference/combine_geoms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine geometries — combine_geoms","text":"x vector geometries","code":""},{"path":"/reference/distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance calculations — euclidean_distance","title":"Distance calculations — euclidean_distance","text":"Distance calculations","code":""},{"path":"/reference/distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance calculations — euclidean_distance","text":"","code":"euclidean_distance(x, y)  euclidean_distance_pairwise(x, y)  euclidean_distance_matrix(x, y)  haversine_distance(x, y)  haversine_distances(x, y)  haversine_distance_matrix(x, y)  geodesic_distance(x, y)  geodesic_distances(x, y)  geodesic_distance_matrix(x, y)  vincenty_distance(x, y)  vincenty_distances(x, y)  vincenty_distance_matrix(x, y)"},{"path":"/reference/distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance calculations — euclidean_distance","text":"x single point list points rs_POINT y single point list points rs_POINT","code":""},{"path":"/reference/extreme_coords.html","id":null,"dir":"Reference","previous_headings":"","what":"Find extremes — extreme_coords","title":"Find extremes — extreme_coords","text":"Find extremes","code":""},{"path":"/reference/extreme_coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find extremes — extreme_coords","text":"","code":"extreme_coords(x)"},{"path":"/reference/extreme_coords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find extremes — extreme_coords","text":"x geometry","code":""},{"path":"/reference/geometry.html","id":null,"dir":"Reference","previous_headings":"","what":"Create geometry — geom_point","title":"Create geometry — geom_point","text":"Create geometry Create list points Given matrix x, y coordinates, create list points","code":""},{"path":"/reference/geometry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create geometry — geom_point","text":"","code":"geom_point(x, y)  geom_points(x)  geom_points_xy(x, y)  geom_points_matrix(x)  geom_multipoint(x)  geom_multipoints(x)  geom_polygon(x)  geom_polygons(x)  geom_multipolygon(x)  geom_multipolygons(x)  geom_linestring(x)  geom_linestrings(x)  geom_multilinestring(x)  geom_multilinestrings(x)"},{"path":"/reference/haversine_destination.html","id":null,"dir":"Reference","previous_headings":"","what":"Haversine Destination — haversine_destination","title":"Haversine Destination — haversine_destination","text":"Haversine Destination","code":""},{"path":"/reference/haversine_destination.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Haversine Destination — haversine_destination","text":"","code":"haversine_destination(x, bearing, distance)"},{"path":"/reference/haversine_intermediate.html","id":null,"dir":"Reference","previous_headings":"","what":"Haversine Intermediate — haversine_intermediate","title":"Haversine Intermediate — haversine_intermediate","text":"Haversine Intermediate","code":""},{"path":"/reference/haversine_intermediate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Haversine Intermediate — haversine_intermediate","text":"","code":"haversine_intermediate(x, y, distance)"},{"path":"/reference/predicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial Predicates — contains","title":"Spatial Predicates — contains","text":"Spatial Predicates","code":""},{"path":"/reference/predicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatial Predicates — contains","text":"","code":"contains(x, y)  contains_sparse(x, y)  contains_pairwise(x, y)  intersects(x, y)  intersects_sparse(x, y)  intersects_pairwise(x, y)  within(x, y)  within_sparse(x, y)  within_pairwise(x, y)"},{"path":"/reference/print.html","id":null,"dir":"Reference","previous_headings":"","what":"Printing and formatting — print.point","title":"Printing and formatting — print.point","text":"Printing formatting","code":""},{"path":"/reference/print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Printing and formatting — print.point","text":"","code":"# S3 method for point print(x, width = NULL)  # S3 method for multipoint print(x, width = NULL)  # S3 method for polygon print(x, width = NULL)  # S3 method for multipolygon print(x, width = NULL)  # S3 method for linestring print(x, width = NULL)  # S3 method for multilinestring print(x, width = NULL)"},{"path":"/reference/read_geojson.html","id":null,"dir":"Reference","previous_headings":"","what":"Read GeoJSON file — read_geojson","title":"Read GeoJSON file — read_geojson","text":"Read GeoJson file using geojson crate. function crash geojson files ~ 50mb +. Working though....","code":""},{"path":"/reference/read_geojson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read GeoJSON file — read_geojson","text":"","code":"read_geojson(filepath)"},{"path":"/reference/read_geojson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read GeoJSON file — read_geojson","text":"filepath file path read","code":""},{"path":"/reference/read_geojson.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read GeoJSON file — read_geojson","text":"improve reading speed set --max-ppsize=500000 creating R session.","code":""},{"path":"/reference/rstar_rtree.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an rstar RTree from a vector of geometry — rstar_rtree","title":"Create an rstar RTree from a vector of geometry — rstar_rtree","text":"Create rstar RTree vector geometry","code":""},{"path":"/reference/rstar_rtree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an rstar RTree from a vector of geometry — rstar_rtree","text":"","code":"rstar_rtree(x)"},{"path":"/reference/rstar_rtree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an rstar RTree from a vector of geometry — rstar_rtree","text":"x vector rust geometry","code":""},{"path":"/reference/simplify_geom.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplfiy Geometries — simplify_geom","title":"Simplfiy Geometries — simplify_geom","text":"Simplfiy Geometries","code":""},{"path":"/reference/simplify_geom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplfiy Geometries — simplify_geom","text":"","code":"simplify_geom(x, epsilon)  simplify_geoms(x, epsilon)  simplify_vw_geom(x, epsilon)  simplify_vw_geoms(x, epsilon)"},{"path":"/reference/vector-compatibility.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal vet — vector-compatibility","title":"Internal vet — vector-compatibility","text":"Internal vet","code":""},{"path":"/reference/wkb.html","id":null,"dir":"Reference","previous_headings":"","what":"WKB Translation — wkb_from_geom","title":"WKB Translation — wkb_from_geom","text":"WKB Translation","code":""},{"path":"/reference/wkb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"WKB Translation — wkb_from_geom","text":"","code":"wkb_from_geom(x)  wkb_from_geoms(x)  wkb_to_geom(x)  wkb_to_geoms(x)"},{"path":"/reference/wkt.html","id":null,"dir":"Reference","previous_headings":"","what":"WKT translation — wkt_to_geom","title":"WKT translation — wkt_to_geom","text":"WKT translation","code":""},{"path":"/reference/wkt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"WKT translation — wkt_to_geom","text":"","code":"wkt_to_geom(x)  wkt_from_geom(x)  wkt_to_geoms(x)  wkt_from_geoms(x)"}]
