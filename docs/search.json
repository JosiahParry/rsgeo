[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 rsgeo authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Josiah Parry. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Parry J (2023). rsgeo: Interface Rust's 'geo-types' Library. https://github.com/JosiahParry/rsgeo, https://josiahparry.r-universe.dev/rsgeo, https://rsgeo.josiahparry.com/.","code":"@Manual{,   title = {rsgeo: An Interface to Rust's 'geo-types' Library},   author = {Josiah Parry},   year = {2023},   note = {https://github.com/JosiahParry/rsgeo, https://josiahparry.r-universe.dev/rsgeo, https://rsgeo.josiahparry.com/}, }"},{"path":"/index.html","id":"rsgeo","dir":"","previous_headings":"","what":"An Interface to Rusts geo-types' Library","title":"An Interface to Rusts geo-types' Library","text":"rsgeo interface Rust libraries geo-types geo. geo-types implements pure rust geometry primitives. geo library adds additional algorithm functionalities top geo-types. package lets harness speed, safety, memory efficiency libraries. geo-types support Z M dimensions. support CRS moment. rsgeo works vectors geometries. compare sf always geometry column class sfc object (simple feature column). Cast geometries sf Calculate unsigned area polygons. Find centroids Extract points coordinates Plot polygons centroids  Calculate distance matrix. Note often floating point error differences check = FALSE case. Simplify geometries.  Union geometries union_geoms(). things sf better ! One performing unary unions complex geometries.  can cast geometries well. unions faster using rsgeo vectors like linestrings. Find closest point geometry  Find haversine destination point, bearing, distance. Compare fast geosphere destination point function.  Find intermediate point great circle.  Find extreme coordinates extreme_coords()  Get bounding rectangles  Convex hulls  Expand constituent geometries list geometry vectors can flatten resultant geometries single vector using flatten_geoms() Combine geometries single multi- geometry Spatial predicates","code":"# install.packages( #   'rsgeo',  #   repos = c('https://josiahparry.r-universe.dev', 'https://cloud.r-project.org') # ) library(rsgeo) # get geometry from sf data(guerry, package = \"sfdep\")  polys <- guerry[[\"geometry\"]] |>   sf::st_cast(\"POLYGON\")  # cast to rust geo-types rs_polys <- as_rsgeo(polys)  head(rs_polys) #> <rs_POLYGON[6]> #> [1] Polygon { exterior: LineString([Coord { x: 801150.0, y: 2092615.0 }, Coord... #> [2] Polygon { exterior: LineString([Coord { x: 729326.0, y: 2521619.0 }, Coord... #> [3] Polygon { exterior: LineString([Coord { x: 710830.0, y: 2137350.0 }, Coord... #> [4] Polygon { exterior: LineString([Coord { x: 882701.0, y: 1920024.0 }, Coord... #> [5] Polygon { exterior: LineString([Coord { x: 886504.0, y: 1922890.0 }, Coord... #> [6] Polygon { exterior: LineString([Coord { x: 747008.0, y: 1925789.0 }, Coord... sf::st_as_sfc(rs_polys) #> Geometry set for 116 features  #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441 #> CRS:           NA #> First 5 geometries: #> POLYGON ((801150 2092615, 800669 2093190, 80068... #> POLYGON ((729326 2521619, 729320 2521230, 72928... #> POLYGON ((710830 2137350, 711746 2136617, 71243... #> POLYGON ((882701 1920024, 882408 1920733, 88177... #> POLYGON ((886504 1922890, 885733 1922978, 88547... bench::mark(   rust = unsigned_area(rs_polys),   sf = sf::st_area(polys),   check = FALSE ) #> # A tibble: 2 × 6 #>   expression      min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 rust        53.96µs   55.8µs    17616.     3.8KB      0   #> 2 sf           1.34ms    1.4ms      709.   786.9KB     10.7 bench::mark(   centroids(rs_polys),   sf::st_centroid(polys),   check = FALSE ) #> # A tibble: 2 × 6 #>   expression                  min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>             <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 centroids(rs_polys)    162.61µs 203.24µs     4166.     3.8KB    14.6  #> 2 sf::st_centroid(polys)   2.34ms   2.46ms      404.   892.9KB     6.70 coords(rs_polys) |>    head() #>        x       y line_id polygon_id #> 1 801150 2092615       1          1 #> 2 800669 2093190       1          1 #> 3 800688 2095430       1          1 #> 4 800780 2095795       1          1 #> 5 800589 2096112       1          1 #> 6 800333 2097190       1          1 plot(rs_polys) plot(centroids(rs_polys), add = TRUE) pnts <- centroids(rs_polys) pnts_sf <- sf::st_as_sfc(pnts)  bench::mark(   rust = distance_euclidean_matrix(pnts, pnts),   sf = sf::st_distance(pnts_sf, pnts_sf),   check = FALSE ) #> # A tibble: 2 × 6 #>   expression      min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 rust          305µs 429.43µs     2266.     108KB     6.15 #> 2 sf            3.4ms   3.56ms      280.     351KB     2.03 x <- rs_polys x_simple <- simplify_geoms(x, 5000)  plot(x_simple) bench::mark(   rust = simplify_geoms(rs_polys, 500),   sf = sf::st_simplify(polys, FALSE, 500),   check = FALSE ) #> # A tibble: 2 × 6 #>   expression      min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 rust         5.95ms   6.23ms      161.    1.91KB     2.04 #> 2 sf           7.94ms   8.29ms      121.    1.24MB     4.17 plot(union_geoms(rs_polys)) bench::mark(   union_geoms(rs_polys),   sf::st_union(polys),   check = FALSE ) #> # A tibble: 2 × 6 #>   expression                 min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>            <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 union_geoms(rs_polys)    195ms    198ms      5.01        0B        0 #> 2 sf::st_union(polys)      111ms    113ms      8.91     921KB        0 lns <- cast_geoms(rs_polys, \"linestring\") lns_sf <- sf::st_cast(polys, \"LINESTRING\")  bench::mark(   union_geoms(lns),   sf::st_union(lns_sf),   check = FALSE ) #> # A tibble: 2 × 6 #>   expression                min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>           <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 union_geoms(lns)      119.7µs  175.2µs    5015.         0B     0    #> 2 sf::st_union(lns_sf)   83.5ms   84.5ms      11.8    2.46MB     2.95 close_pnt <- closest_point(   rs_polys,    geom_point(800000, 2090000) )  plot(rs_polys[1]) plot(close_pnt, pch = 15, add = TRUE) bench::mark(   rust = haversine_destination(geom_point(10, 10), 45, 10000),   Cpp = geosphere::destPoint(c(10, 10), 45, 10000),   check = FALSE ) #> # A tibble: 2 × 6 #>   expression      min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 rust         5.33µs   6.36µs   145500.     3.2KB     14.6 #> 2 Cpp         15.87µs   17.1µs    50544.    11.8MB     30.3 origin <- geom_point(10, 10)  destination <- haversine_destination(origin, 45, 10000)  plot(c(origin, destination), col = c(\"red\", \"blue\")) middle <- haversine_intermediate(origin, destination, 1/2)  plot(origin) plot(destination, add = TRUE, col = \"red\") plot(middle, add = TRUE, col = \"blue\") france <- union_geoms(rs_polys)  plot(france) plot(extreme_coords(france)[[1]], add = TRUE, pch = 15) rects <- bounding_rect(rs_polys) plot(rects) convex_hull(rs_polys) |>    plot() expand_geoms(rs_polys) |>    head() #> [[1]] #> <rs_LINESTRING[1]> #> [1] LineString([Coord { x: 801150.0, y: 2092615.0 }, Coord { x: 800669.0, y: 2... #>  #> [[2]] #> <rs_LINESTRING[2]> #> [1] LineString([Coord { x: 729326.0, y: 2521619.0 }, Coord { x: 729320.0, y: 2... #> [2] LineString([Coord { x: 647667.0, y: 2468296.0 }, Coord { x: 647777.0, y: 2... #>  #> [[3]] #> <rs_LINESTRING[1]> #> [1] LineString([Coord { x: 710830.0, y: 2137350.0 }, Coord { x: 711746.0, y: 2... #>  #> [[4]] #> <rs_LINESTRING[1]> #> [1] LineString([Coord { x: 882701.0, y: 1920024.0 }, Coord { x: 882408.0, y: 1... #>  #> [[5]] #> <rs_LINESTRING[1]> #> [1] LineString([Coord { x: 886504.0, y: 1922890.0 }, Coord { x: 885733.0, y: 1... #>  #> [[6]] #> <rs_LINESTRING[1]> #> [1] LineString([Coord { x: 747008.0, y: 1925789.0 }, Coord { x: 746630.0, y: 1... expand_geoms(rs_polys) |>    flatten_geoms() |>    head() #> <rs_LINESTRING[6]> #> [1] LineString([Coord { x: 801150.0, y: 2092615.0 }, Coord { x: 800669.0, y: 2... #> [2] LineString([Coord { x: 729326.0, y: 2521619.0 }, Coord { x: 729320.0, y: 2... #> [3] LineString([Coord { x: 647667.0, y: 2468296.0 }, Coord { x: 647777.0, y: 2... #> [4] LineString([Coord { x: 710830.0, y: 2137350.0 }, Coord { x: 711746.0, y: 2... #> [5] LineString([Coord { x: 882701.0, y: 1920024.0 }, Coord { x: 882408.0, y: 1... #> [6] LineString([Coord { x: 886504.0, y: 1922890.0 }, Coord { x: 885733.0, y: 1... combine_geoms(lns) #> <rs_LINESTRING[1]> #> [1] MultiLineString([LineString([Coord { x: 801150.0, y: 2092615.0 }, Coord { ... x <- rs_polys[1:5] intersects_sparse(x, rs_polys) #> [[1]] #> [1]  1 48 50 92 94 #>  #> [[2]] #> [1]   2   7  63  78  80  81  98 101 #>  #> [[3]] #> [1]  3 20 27 53 77 84 94 #>  #> [[4]] #> [1]   4   5  30 107 109 #>  #> [[5]] #> [1]  4  5 30 48"},{"path":"/index.html","id":"notes","dir":"","previous_headings":"","what":"Notes","title":"An Interface to Rusts geo-types' Library","text":"Right now plotting done using wk first casting rsgeo sfc object.","code":""},{"path":"/reference/area.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the area of a polygon — signed_area","title":"Calculate the area of a polygon — signed_area","text":"Functions calculate different types area polygons.","code":""},{"path":"/reference/area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the area of a polygon — signed_area","text":"","code":"signed_area(x)  unsigned_area(x)  signed_area_cd(x)  unsigned_area_cd(x)  signed_area_geodesic(x)  unsigned_area_geodesic(x)"},{"path":"/reference/area.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the area of a polygon — signed_area","text":"x object class rsgeo","code":""},{"path":"/reference/area.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the area of a polygon — signed_area","text":"numeric vector area contained geometry","code":""},{"path":"/reference/area.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the area of a polygon — signed_area","text":"functions assume counter clock-wise winding accordance simple feature access standard functions ending _cd use Chamberlain-Duquette algorithm spherical area Chamberlain-Duquette Geodesic areas returned meters squared assume non-planar geometries See geo docs : GeodesicArea Area ChamberlainDuquetteArea x <- c(0, 1, 1, 0, 0) y <- c(0, 0, 1, 1, 0) p <- geom_polygon(x, y) signed_area(p) unsigned_area(p) signed_area_cd(p) unsigned_area_cd(p) signed_area_geodesic(p) unsigned_area_geodesic(p)","code":""},{"path":"/reference/as_rsgeo.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to an rsgeo vector — as_rsgeo","title":"Convert to an rsgeo vector — as_rsgeo","text":"Convert rsgeo vector","code":""},{"path":"/reference/as_rsgeo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to an rsgeo vector — as_rsgeo","text":"","code":"as_rsgeo(x)"},{"path":"/reference/as_rsgeo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to an rsgeo vector — as_rsgeo","text":"x geometry vector","code":""},{"path":"/reference/as_rsgeom.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert sf object to a Rust geo_type — as_rsgeom","title":"Convert sf object to a Rust geo_type — as_rsgeom","text":"Convert sf object Rust geo_type","code":""},{"path":"/reference/as_rsgeom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert sf object to a Rust geo_type — as_rsgeom","text":"","code":"as_rsgeom(x)"},{"path":"/reference/as_rsgeom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert sf object to a Rust geo_type — as_rsgeom","text":"x sfc sfg object","code":""},{"path":"/reference/as_sfg.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert geo-type to sfg or sfc object — as_sfg","title":"Convert geo-type to sfg or sfc object — as_sfg","text":"Convert geo-type sfg sfc object","code":""},{"path":"/reference/as_sfg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert geo-type to sfg or sfc object — as_sfg","text":"","code":"as_sfg(x)"},{"path":"/reference/as_sfg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert geo-type to sfg or sfc object — as_sfg","text":"x rust geo-type","code":""},{"path":"/reference/bearing.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Bearing — bearing_geodesic","title":"Calculate Bearing — bearing_geodesic","text":"Calculates bearing two point geometries.","code":""},{"path":"/reference/bearing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Bearing — bearing_geodesic","text":"","code":"bearing_geodesic(x, y)  bearing_haversine(x, y)"},{"path":"/reference/bearing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Bearing — bearing_geodesic","text":"x object class rs_POINT y object class rs_POINT","code":""},{"path":"/reference/bearing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Bearing — bearing_geodesic","text":"vector doubles calculated bearing x y","code":""},{"path":"/reference/bearing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Bearing — bearing_geodesic","text":"","code":"x <- geom_point(runif(10, 0, 90), rnorm(10, 1, 90)) y <- geom_point(runif(10, 0, 90), rnorm(10, 1, 90)) bearing_geodesic(x, y) #>  [1]       NaN       NaN       NaN       NaN       NaN       NaN -156.0372 #>  [8]       NaN -171.1058       NaN bearing_haversine(x, y) #>  [1]  171.1833  -13.2571 -135.6593 -149.9801 -152.2839 -177.8303 -156.0393 #>  [8] -173.6608 -171.1432 -108.8116"},{"path":"/reference/boundaries.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Geometric Boundaries — bounding_boxes","title":"Compute Geometric Boundaries — bounding_boxes","text":"vector geometries idenitfy different types boundaries.","code":""},{"path":"/reference/boundaries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Geometric Boundaries — bounding_boxes","text":"","code":"bounding_boxes(x)  bounding_rect(x)  minimum_rotated_rect(x)  convex_hull(x)  concave_hull(x, concavity)  extreme_coords(x)  bounding_box(x)"},{"path":"/reference/boundaries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Geometric Boundaries — bounding_boxes","text":"x object class rsgeo concavity value 0 1 specifying concavity convex hull","code":""},{"path":"/reference/boundaries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Geometric Boundaries — bounding_boxes","text":"bounding_box() returns named vector xmin, ymin, xmax, ymax bounding_boxes() returns list bounding box numeric vectors geometry bounding_rect() returns rs_POLYGON bounding rectangle geometry convex_hull() returns rs_POLYGON convex hull geometry concave_hull() returns rs_POLYGON specified concavity geometry extreme_coords() returns extreme coordinates geometry list element named vector xmin, ymin, xmax, ymax element Point geometry extreme value minimum_rotated_rect() returns minimum rotated rectangle covering geometry rs_POLYGON","code":""},{"path":"/reference/boundaries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Geometric Boundaries — bounding_boxes","text":"Note want convex concave hull entire vector geometries must first union combine using either combine_geoms() union_geoms()","code":""},{"path":"/reference/boundaries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Geometric Boundaries — bounding_boxes","text":"","code":"lns <- geom_linestring(   1:20,   runif(20, -5, 5),   rep.int(1:5, 4) ) bounding_box(lns) #>      xmin      ymin      xmax      ymax  #>  1.000000 -4.750805 20.000000  4.795120  bounding_boxes(lns) #> [[1]] #>      xmin      ymin      xmax      ymax  #>  1.000000 -4.750805 16.000000  4.029242  #>  #> [[2]] #>      xmin      ymin      xmax      ymax  #>  3.000000 -3.142936 18.000000  3.143420  #>  #> [[3]] #>      xmin      ymin      xmax      ymax  #>  2.000000 -4.033262 17.000000  4.795120  #>  #> [[4]] #>      xmin      ymin      xmax      ymax  #>  4.000000 -2.829836 19.000000  2.250505  #>  #> [[5]] #>      xmin      ymin      xmax      ymax  #>  5.000000 -2.324442 20.000000  3.677400  #>  minimum_rotated_rect(lns) #> <rs_POLYGON[5]> #> [1] Polygon { exterior: LineString([Coord { x: 15.999999999999998, y: -3.96371... #> [2] Polygon { exterior: LineString([Coord { x: 18.0, y: 3.1434203195385666 }, ... #> [3] Polygon { exterior: LineString([Coord { x: 2.000000000000001, y: -4.033262... #> [4] Polygon { exterior: LineString([Coord { x: 18.999999999999996, y: 2.250505... #> [5] Polygon { exterior: LineString([Coord { x: 19.999999999999996, y: -2.32444... convex_hull(lns) #> <rs_POLYGON[5]> #> [1] Polygon { exterior: LineString([Coord { x: 6.0, y: -4.750804777722806 }, C... #> [2] Polygon { exterior: LineString([Coord { x: 8.0, y: -3.142935521900654 }, C... #> [3] Polygon { exterior: LineString([Coord { x: 17.0, y: 2.8384346677921712 }, ... #> [4] Polygon { exterior: LineString([Coord { x: 14.0, y: -2.8298359969630837 },... #> [5] Polygon { exterior: LineString([Coord { x: 10.0, y: 0.7859983830712736 }, ... concave_hull(lns, 0.5) #> <rs_POLYGON[5]> #> [1] Polygon { exterior: LineString([Coord { x: 6.0, y: -4.750804777722806 }, C... #> [2] Polygon { exterior: LineString([Coord { x: 8.0, y: -3.142935521900654 }, C... #> [3] Polygon { exterior: LineString([Coord { x: 17.0, y: 2.8384346677921712 }, ... #> [4] Polygon { exterior: LineString([Coord { x: 14.0, y: -2.8298359969630837 },... #> [5] Polygon { exterior: LineString([Coord { x: 10.0, y: 0.7859983830712736 }, ... extreme_coords(lns) #> [[1]] #> <rs_POINT[4]> #>                                              xmin  #>    Point(Coord { x: 1.0, y: 4.029242098331451 }))  #>                                              ymin  #>   Point(Coord { x: 6.0, y: -4.750804777722806 }))  #>                                              xmax  #> Point(Coord { x: 16.0, y: -3.9637103397399187 }))  #>                                              ymax  #>    Point(Coord { x: 1.0, y: 4.029242098331451 }))  #>  #> [[2]] #> <rs_POINT[4]> #>                                             xmin  #>  Point(Coord { x: 3.0, y: 1.2414750223979354 }))  #>                                             ymin  #>  Point(Coord { x: 8.0, y: -3.142935521900654 }))  #>                                             xmax  #> Point(Coord { x: 18.0, y: 3.1434203195385635 }))  #>                                             ymax  #> Point(Coord { x: 18.0, y: 3.1434203195385635 }))  #>  #> [[3]] #> <rs_POINT[4]> #>                                             xmin  #>  Point(Coord { x: 2.0, y: -4.033262005541474 }))  #>                                             ymin  #>  Point(Coord { x: 2.0, y: -4.033262005541474 }))  #>                                             xmax  #> Point(Coord { x: 17.0, y: 2.8384346677921712 }))  #>                                             ymax  #>   Point(Coord { x: 7.0, y: 4.795119611080736 }))  #>  #> [[4]] #> <rs_POINT[4]> #>                                              xmin  #>   Point(Coord { x: 4.0, y: -1.725542435888201 }))  #>                                              ymin  #> Point(Coord { x: 14.0, y: -2.8298359969630837 }))  #>                                              xmax  #>   Point(Coord { x: 19.0, y: 2.250505315605551 }))  #>                                              ymax  #>   Point(Coord { x: 19.0, y: 2.250505315605551 }))  #>  #> [[5]] #> <rs_POINT[4]> #>                                              xmin  #>   Point(Coord { x: 5.0, y: 3.6773998313583434 }))  #>                                              ymin  #> Point(Coord { x: 20.0, y: -2.3244423139840364 }))  #>                                              xmax  #> Point(Coord { x: 20.0, y: -2.3244423139840364 }))  #>                                              ymax  #>   Point(Coord { x: 5.0, y: 3.6773998313583434 }))  #>"},{"path":"/reference/cast_geoms.html","id":null,"dir":"Reference","previous_headings":"","what":"Cast geometries to another type — cast_geoms","title":"Cast geometries to another type — cast_geoms","text":"Cast geometries another type","code":""},{"path":"/reference/cast_geoms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cast geometries to another type — cast_geoms","text":"","code":"cast_geoms(x, to)"},{"path":"/reference/cast_geoms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cast geometries to another type — cast_geoms","text":"x object class rsgeo character scalar target geometry type. Must one \"point\", \"multipoint\", \"polygon\", \"multipolygon\", \"linestring\", \"multilinestring\".","code":""},{"path":"/reference/cast_geoms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cast geometries to another type — cast_geoms","text":"object class rsgeo","code":""},{"path":"/reference/cast_geoms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cast geometries to another type — cast_geoms","text":"conversions made available. left hand column indicates originating vector class right hand column indicates class can cast . Note correctness conversions checked verified. cast rs_MULTIPOINT rs_POLYGON, validity polygon guaranteed. Conversions rs_POLYGON rs_LINESTRING result exterior ring polygon ignoring interrior rings .","code":""},{"path":"/reference/cast_geoms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cast geometries to another type — cast_geoms","text":"","code":"ply <- geom_polygon(c(0, 1, 1, 0, 0), c(0, 0, 1, 1, 0)) cast_geoms(ply, \"linestring\") #> <rs_LINESTRING[1]> #> [1] LineString([Coord { x: 0.0, y: 0.0 }, Coord { x: 1.0, y: 0.0 }, Coord { x:... cast_geoms(ply, \"multipoint\") #> <rs_MULTIPOINT[1]> #> [1] MultiPoint([Point(Coord { x: 0.0, y: 0.0 }), Point(Coord { x: 1.0, y: 0.0 ..."},{"path":"/reference/centroid.html","id":null,"dir":"Reference","previous_headings":"","what":"Find centroid — centroid","title":"Find centroid — centroid","text":"Find centroid","code":""},{"path":"/reference/centroid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find centroid — centroid","text":"","code":"centroid(x)  centroids(x)"},{"path":"/reference/centroid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find centroid — centroid","text":"x object class point","code":""},{"path":"/reference/centroids.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Centroids — centroids","title":"Extract Centroids — centroids","text":"Given vector geometries, extract centroids.","code":""},{"path":"/reference/centroids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Centroids — centroids","text":"","code":"centroids(x)"},{"path":"/reference/centroids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Centroids — centroids","text":"x object class rsgeo","code":""},{"path":"/reference/centroids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Centroids — centroids","text":"object class rs_POINT","code":""},{"path":"/reference/centroids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Centroids — centroids","text":"","code":"lns <- geom_linestring(1:100, runif(100, -10, 10), rep.int(1:5, 20)) centroids(lns) #> <rs_POINT[5]> #> [1] Point(Coord { x: 55.30438962049526, y: -0.7968826140458218 }))  #> [2] Point(Coord { x: 49.019771239989446, y: 0.437658653051966 }))   #> [3] Point(Coord { x: 50.24532372103153, y: 1.9188131319181634 }))   #> [4] Point(Coord { x: 51.379459556926825, y: 0.29679717348388024 })) #> [5] Point(Coord { x: 53.57615485864889, y: -0.42141184913509694 }))"},{"path":"/reference/chaikin_smoothing.html","id":null,"dir":"Reference","previous_headings":"","what":"Chaikin Smoothing — chaikin_smoothing","title":"Chaikin Smoothing — chaikin_smoothing","text":"Chaikin Smoothing","code":""},{"path":"/reference/chaikin_smoothing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chaikin Smoothing — chaikin_smoothing","text":"","code":"chaikin_smoothing(x, niter)"},{"path":"/reference/closest_point.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Closest Point — closest_point","title":"Find Closest Point — closest_point","text":"given geometry, find closest point geometry point. closest point may intersection, single point, unable determined.","code":""},{"path":"/reference/closest_point.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Closest Point — closest_point","text":"","code":"closest_point(x, y)  closest_point_haversine(x, y)"},{"path":"/reference/closest_point.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Closest Point — closest_point","text":"x object class rsgeo y object class rs_POINT","code":""},{"path":"/reference/closest_point.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Closest Point — closest_point","text":"rs_POINT vector","code":""},{"path":"/reference/closest_point.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Closest Point — closest_point","text":"","code":"x <- geom_linestring(1:100, runif(100, 0, 90), rep.int(1:10, 10)) y <- geom_point(runif(10, 0, 90), rnorm(10, 1, 90)) closest_point(x, y) #> <rs_POINT[10]> #>  [1] Point(Coord { x: 42.105933494785695, y: 66.06050124702755 })) #>  [2] Point(Coord { x: 50.04989634195688, y: 74.61122189706461 }))  #>  [3] Point(Coord { x: 29.0, y: 2.5417980761267245 }))              #>  [4] Point(Coord { x: 67.0, y: 89.15954707190394 }))               #>  [5] Point(Coord { x: 10.0, y: 0.10015812702476978 }))             #>  [6] Point(Coord { x: 21.0, y: 30.82952815806493 }))               #>  [7] Point(Coord { x: 18.0, y: 77.03447380336002 }))               #>  [8] Point(Coord { x: 73.0, y: 4.822875838726759 }))               #>  [9] Point(Coord { x: 4.0, y: 16.481087976135314 }))               #> [10] Point(Coord { x: 56.0, y: 4.848692351952195 }))               closest_point_haversine(x, y) #> <rs_POINT[10]> #>  [1] Point(Coord { x: 36.84497877613438, y: 67.96936835838562 })) #>  [2] Point(Coord { x: 68.22521853475159, y: 74.57662287461321 })) #>  [3] Point(Coord { x: 29.0, y: 2.5417980761267245 }))             #>  [4] Point(Coord { x: 67.0, y: 89.15954707190394 }))              #>  [5] Point(Coord { x: 10.0, y: 0.10015812702476978 }))            #>  [6] Point(Coord { x: 21.0, y: 30.82952815806493 }))              #>  [7] Point(Coord { x: 98.0, y: 65.52344706840813 }))              #>  [8] Point(Coord { x: 73.0, y: 4.822875838726759 }))              #>  [9] Point(Coord { x: 4.0, y: 16.481087976135314 }))              #> [10] Point(Coord { x: 56.0, y: 4.848692351952195 }))"},{"path":"/reference/combine_geoms.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine geometries — combine_geoms","title":"Combine geometries — combine_geoms","text":"Given vector geometries combine single geometry.","code":""},{"path":"/reference/combine_geoms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine geometries — combine_geoms","text":"","code":"combine_geoms(x)  union_geoms(x)"},{"path":"/reference/combine_geoms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine geometries — combine_geoms","text":"x object class rsgeo","code":""},{"path":"/reference/combine_geoms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine geometries — combine_geoms","text":"object class rsgeo length one.","code":""},{"path":[]},{"path":"/reference/combine_geoms.html","id":"combine-geoms-","dir":"Reference","previous_headings":"","what":"combine_geoms()","title":"Combine geometries — combine_geoms","text":"combine_geoms() combines vector geometries vector length one MULTI counterpart. rs_POINT rs_MULTIPOINT -> rs_MULTIPOINT rs_LINESTRING rs_MULTILINESTRING -> rs_MULTILINESTRING rs_POLYGON rs_MULTIPOLYGON -> rs_MULTIPOLYGON rs_GEOMETRYCOLLECTION supported","code":""},{"path":"/reference/combine_geoms.html","id":"union-geoms-","dir":"Reference","previous_headings":"","what":"union_geoms()","title":"Combine geometries — combine_geoms","text":"union_geoms() creates union geometries removing repeated points dissolving shared boundaries. rs_POINT - combines removes repeated points rs_MULTIPOINT - combines removes repeated points rs_LINESTRING - combines removes duplicated points rs_MULTILINESTRING - combines removes duplicated points rs_POLYGON - unions geometries single geometry rs_MULTIPOLYGON - unions geometries single geometry","code":""},{"path":"/reference/combine_geoms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine geometries — combine_geoms","text":"","code":"pnts <- geom_point(runif(10), runif(10)) combine_geoms(pnts) #> <rs_POINT[1]> #> [1] MultiPoint([Point(Coord { x: 0.1250046598725021, y: 0.07274269196204841 })...  lns <- geom_linestring(1:100, runif(100, -10, 10), rep.int(1:5, 20)) union_geoms(lns) #> <rs_MULTILINESTRING[1]> #> [1] MultiLineString([LineString([Coord { x: 5.0, y: -6.967440927401185 }, Coor...  x <- c(0, 1, 1, 0, 0) y <- c(0, 0, 1, 1, 0)  p1 <- geom_polygon(x, y) p2 <- geom_polygon(x - 1, y + 0.5)  z <- c(p1, p2)  res <- union_geoms(z) res #> <rs_MULTIPOLYGON[1]> #> [1] MultiPolygon([Polygon { exterior: LineString([Coord { x: 0.0, y: 0.5 }, Co...  if (rlang::is_installed(c(\"sf\", \"wk\"))) {   par(mfrow = c(1, 2))   plot(z)   plot(res) }"},{"path":"/reference/construction.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct Geometries — geom_point","title":"Construct Geometries — geom_point","text":"Constructs geometries numeric vectors.","code":""},{"path":"/reference/construction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct Geometries — geom_point","text":"","code":"geom_point(x, y)  geom_multipoint(x, y, id = 1)  geom_linestring(x, y, id = 1)  geom_polygon(x, y, id = 1, ring = 1)"},{"path":"/reference/construction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct Geometries — geom_point","text":"x vector x coordinates y vector y coordinates id feature identifier ring id polygon ring","code":""},{"path":"/reference/construction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct Geometries — geom_point","text":"object class rsgeo","code":""},{"path":"/reference/construction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct Geometries — geom_point","text":"","code":"geom_point(3, 0.14) #> <rs_POINT[1]> #> [1] Point(Coord { x: 3.0, y: 0.14 })) geom_multipoint(1:10, 10:1) #> <rs_MULTIPOINT[1]> #> [1] MultiPoint([Point(Coord { x: 1.0, y: 10.0 }), Point(Coord { x: 2.0, y: 9.0... geom_linestring(1:10, 10:1) #> <rs_LINESTRING[1]> #> [1] LineString([Coord { x: 1.0, y: 10.0 }, Coord { x: 2.0, y: 9.0 }, Coord { x... geom_polygon(c(0, 1, 1, 0, 0), c(0, 0, 1, 1, 0)) #> <rs_POLYGON[1]> #> [1] Polygon { exterior: LineString([Coord { x: 0.0, y: 0.0 }, Coord { x: 1.0, ..."},{"path":"/reference/convex.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the Convexity of a LineString — is_convex","title":"Determine the Convexity of a LineString — is_convex","text":"given rs_LINESTRING vector, test convexity. Convexity can tested strictly strongly, well based winding.","code":""},{"path":"/reference/convex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the Convexity of a LineString — is_convex","text":"","code":"is_convex(x)  is_ccw_convex(x)  is_cw_convex(x)  is_strictly_convex(x)  is_strictly_ccw_convex(x)  is_strictly_cw_convex(x)"},{"path":"/reference/convex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the Convexity of a LineString — is_convex","text":"x object class rs_LINESTRING See geo docs details","code":""},{"path":"/reference/convex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the Convexity of a LineString — is_convex","text":"logical vector","code":""},{"path":"/reference/convex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine the Convexity of a LineString — is_convex","text":"","code":"lns <- geom_linestring(     1:20,     runif(20, -5, 5),     rep.int(1:5, 4)   )    is_convex(lns) #> [1] FALSE FALSE FALSE FALSE FALSE is_cw_convex(lns) #> [1] FALSE FALSE FALSE FALSE FALSE is_ccw_convex(lns) #> [1] FALSE FALSE FALSE FALSE FALSE is_strictly_convex(lns) #> [1] FALSE FALSE FALSE FALSE FALSE is_strictly_cw_convex(lns) #> [1] FALSE FALSE FALSE FALSE FALSE is_strictly_ccw_convex(lns) #> [1] FALSE FALSE FALSE FALSE FALSE"},{"path":"/reference/coords.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Coordinates — coords","title":"Extract Coordinates — coords","text":"Given rsgeo class object, extract object's coordinates data frame. Empty missing geometries ignored.","code":""},{"path":"/reference/coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Coordinates — coords","text":"","code":"coords(x)"},{"path":"/reference/coords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Coordinates — coords","text":"x object class rsgeo","code":""},{"path":"/reference/coords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Coordinates — coords","text":"data.frame columns x, y. Additional columns returned based geometry type. Additional columns : id line_id: refers LineString ID rs_LINESTRING, component LineString MultiLineString, ring ID Polygon. multilinestring_id polygon_id multipolygon_id","code":""},{"path":"/reference/coords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Coordinates — coords","text":"","code":"pnt <- geom_point(3, 0.14) mpnt <- geom_multipoint(1:10, 10:1) ln <- geom_linestring(1:10, 10:1) ply <- geom_polygon(c(0, 1, 1, 0, 0), c(0, 0, 1, 1, 0))  coords(pnt) #>   x    y #> 1 3 0.14 coords(mpnt) #>     x  y id #> 1   1 10  1 #> 2   2  9  1 #> 3   3  8  1 #> 4   4  7  1 #> 5   5  6  1 #> 6   6  5  1 #> 7   7  4  1 #> 8   8  3  1 #> 9   9  2  1 #> 10 10  1  1 coords(ln) #>     x  y line_id #> 1   1 10       1 #> 2   2  9       1 #> 3   3  8       1 #> 4   4  7       1 #> 5   5  6       1 #> 6   6  5       1 #> 7   7  4       1 #> 8   8  3       1 #> 9   9  2       1 #> 10 10  1       1 coords(union_geoms(rep(ln, 2))) #>     x  y line_id multilinestring_id #> 1   1 10       1                  1 #> 2   2  9       1                  1 #> 3   3  8       1                  1 #> 4   4  7       1                  1 #> 5   5  6       1                  1 #> 6   6  5       1                  1 #> 7   7  4       1                  1 #> 8   8  3       1                  1 #> 9   9  2       1                  1 #> 10 10  1       1                  1 #> 11  1 10       2                  1 #> 12  2  9       2                  1 #> 13  3  8       2                  1 #> 14  4  7       2                  1 #> 15  5  6       2                  1 #> 16  6  5       2                  1 #> 17  7  4       2                  1 #> 18  8  3       2                  1 #> 19  9  2       2                  1 #> 20 10  1       2                  1 coords(ply) #>   x y line_id polygon_id #> 1 0 0       1          1 #> 2 1 0       1          1 #> 3 1 1       1          1 #> 4 0 1       1          1 #> 5 0 0       1          1 coords(union_geoms(rep(ply, 2))) #>   x y line_id polygon_id multipolygon_id #> 1 1 0       1          1               1 #> 2 1 1       1          1               1 #> 3 0 1       1          1               1 #> 4 0 0       1          1               1 #> 5 1 0       1          1               1"},{"path":"/reference/distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Distances — distance_euclidean_pairwise","title":"Calculate Distances — distance_euclidean_pairwise","text":"Calculates distances two vectors geometries. number different distance methods can utilized.","code":""},{"path":"/reference/distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Distances — distance_euclidean_pairwise","text":"","code":"distance_euclidean_pairwise(x, y)  distance_hausdorff_pairwise(x, y)  distance_vicenty_pairwise(x, y)  distance_geodesic_pairwise(x, y)  distance_haversine_pairwise(x, y)  distance_euclidean_matrix(x, y)  distance_hausdorff_matrix(x, y)  distance_vicenty_matrix(x, y)  distance_geodesic_matrix(x, y)  distance_haversine_matrix(x, y)"},{"path":"/reference/distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Distances — distance_euclidean_pairwise","text":"x object class rsgeo y object class rsgeo","code":""},{"path":"/reference/distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Distances — distance_euclidean_pairwise","text":"_matrix functions, returns dense matrix distances whereas _pairwise functions return numeric vector.","code":""},{"path":"/reference/distance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Distances — distance_euclidean_pairwise","text":"_pairwise() _matrix() suffixed functions generate distances pairwise dense matrix respectively. pairwise functions calculate distances ith element vector. Whereas matrix functions calculate distance every geometry. Euclidean distance used planar geometries. Haversine, Geodesic, Vicenty methods calculating distance based spherical geometries. concept spherical geometries rsgeo, choose distance measure appropriately.","code":""},{"path":"/reference/distance.html","id":"notes","dir":"Reference","previous_headings":"","what":"Notes","title":"Calculate Distances — distance_euclidean_pairwise","text":"Hausdorff distance calculated using Euclidean distance. Haversine, Geodesic, Vicenty distances work rs_POINT geometries.","code":""},{"path":"/reference/distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Distances — distance_euclidean_pairwise","text":"","code":"set.seed(1) x <- geom_point(runif(10, -1, 1), runif(10, -1, 1)) y <- rev(x)  distance_euclidean_matrix(x, y) #>            [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>  [1,] 1.2133944 0.8062406 1.7594793 1.7006432 1.3937599 1.1349355 1.3338548 #>  [2,] 1.3525922 0.6555834 1.7298869 1.5755163 1.2330258 1.2345642 1.1497159 #>  [3,] 1.0380092 0.6242009 0.6346275 0.7461572 0.7531728 0.7605975 0.9038199 #>  [4,] 1.8667050 0.5582468 1.3124564 0.6710052 0.2280381 1.6099346 0.0000000 #>  [5,] 0.2802043 1.1569738 1.0200002 1.4896528 1.4959453 0.0000000 1.6099346 #>  [6,] 1.7642711 0.5877217 1.0967047 0.4494745 0.0000000 1.4959453 0.2280381 #>  [7,] 1.7698274 0.9242108 0.7894811 0.0000000 0.4494745 1.4896528 0.6710052 #>  [8,] 1.2724909 1.2253814 0.0000000 0.7894811 1.0967047 1.0200002 1.3124564 #>  [9,] 1.3853455 0.0000000 1.2253814 0.9242108 0.5877217 1.1569738 0.5582468 #> [10,] 0.0000000 1.3853455 1.2724909 1.7698274 1.7642711 0.2802043 1.8667050 #>            [,8]      [,9]     [,10] #>  [1,] 1.1416973 0.2211987 0.0000000 #>  [2,] 1.0970286 0.0000000 0.2211987 #>  [3,] 0.0000000 1.0970286 1.1416973 #>  [4,] 0.9038199 1.1497159 1.3338548 #>  [5,] 0.7605975 1.2345642 1.1349355 #>  [6,] 0.7531728 1.2330258 1.3937599 #>  [7,] 0.7461572 1.5755163 1.7006432 #>  [8,] 0.6346275 1.7298869 1.7594793 #>  [9,] 0.6242009 0.6555834 0.8062406 #> [10,] 1.0380092 1.3525922 1.2133944 #> attr(,\"class\") #> [1] \"matrix\" \"array\"  distance_hausdorff_matrix(x, y) #>            [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>  [1,] 1.2133944 0.8062406 1.7594793 1.7006432 1.3937599 1.1349355 1.3338548 #>  [2,] 1.3525922 0.6555834 1.7298869 1.5755163 1.2330258 1.2345642 1.1497159 #>  [3,] 1.0380092 0.6242009 0.6346275 0.7461572 0.7531728 0.7605975 0.9038199 #>  [4,] 1.8667050 0.5582468 1.3124564 0.6710052 0.2280381 1.6099346 0.0000000 #>  [5,] 0.2802043 1.1569738 1.0200002 1.4896528 1.4959453 0.0000000 1.6099346 #>  [6,] 1.7642711 0.5877217 1.0967047 0.4494745 0.0000000 1.4959453 0.2280381 #>  [7,] 1.7698274 0.9242108 0.7894811 0.0000000 0.4494745 1.4896528 0.6710052 #>  [8,] 1.2724909 1.2253814 0.0000000 0.7894811 1.0967047 1.0200002 1.3124564 #>  [9,] 1.3853455 0.0000000 1.2253814 0.9242108 0.5877217 1.1569738 0.5582468 #> [10,] 0.0000000 1.3853455 1.2724909 1.7698274 1.7642711 0.2802043 1.8667050 #>            [,8]      [,9]     [,10] #>  [1,] 1.1416973 0.2211987 0.0000000 #>  [2,] 1.0970286 0.0000000 0.2211987 #>  [3,] 0.0000000 1.0970286 1.1416973 #>  [4,] 0.9038199 1.1497159 1.3338548 #>  [5,] 0.7605975 1.2345642 1.1349355 #>  [6,] 0.7531728 1.2330258 1.3937599 #>  [7,] 0.7461572 1.5755163 1.7006432 #>  [8,] 0.6346275 1.7298869 1.7594793 #>  [9,] 0.6242009 0.6555834 0.8062406 #> [10,] 1.0380092 1.3525922 1.2133944 #> attr(,\"class\") #> [1] \"matrix\" \"array\"  distance_vicenty_matrix(x, y) #>            [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>  [1,] 134272.26  89636.58 194817.22 188855.18 154968.89 125505.43 148409.63 #>  [2,] 149774.17  72789.93 191424.33 174831.28 137008.98 136581.25 127870.95 #>  [3,] 115523.55  69035.72  70209.61  83056.06  83700.88  84639.96 100310.40 #>  [4,] 207552.27  62143.14 145262.60  74201.85  25216.41 178940.79      0.00 #>  [5,]  31190.18 128402.20 113393.90 165815.99 166378.62      0.00 178940.79 #>  [6,] 196263.22  65354.70 121420.16  49714.56      0.00 166378.62  25216.41 #>  [7,] 197002.96 102515.35  87597.49      0.00  49714.56 165815.99  74201.85 #>  [8,] 141534.10 135498.20      0.00  87597.49 121420.16 113393.90 145262.60 #>  [9,] 153875.69      0.00 135498.20 102515.35  65354.70 128402.20  62143.14 #> [10,]      0.00 153875.69 141534.10 197002.96 196263.22  31190.18 207552.27 #>            [,8]      [,9]     [,10] #>  [1,] 126489.10  24610.78      0.00 #>  [2,] 121412.72      0.00  24610.78 #>  [3,]      0.00 121412.72 126489.10 #>  [4,] 100310.40 127870.95 148409.63 #>  [5,]  84639.96 136581.25 125505.43 #>  [6,]  83700.88 137008.98 154968.89 #>  [7,]  83056.06 174831.28 188855.18 #>  [8,]  70209.61 191424.33 194817.22 #>  [9,]  69035.72  72789.93  89636.58 #> [10,] 115523.55 149774.17 134272.26 #> attr(,\"class\") #> [1] \"matrix\" \"array\"  distance_geodesic_matrix(x, y) #>            [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>  [1,] 134272.26  89636.58 194817.22 188855.18 154968.89 125505.43 148409.63 #>  [2,] 149774.17  72789.93 191424.33 174831.28 137008.98 136581.25 127870.95 #>  [3,] 115523.55  69035.72  70209.61  83056.06  83700.88  84639.96 100310.40 #>  [4,] 207552.27  62143.14 145262.60  74201.85  25216.41 178940.79      0.00 #>  [5,]  31190.18 128402.20 113393.90 165815.99 166378.62      0.00 178940.79 #>  [6,] 196263.22  65354.70 121420.16  49714.56      0.00 166378.62  25216.41 #>  [7,] 197002.96 102515.35  87597.49      0.00  49714.56 165815.99  74201.85 #>  [8,] 141534.10 135498.20      0.00  87597.49 121420.16 113393.90 145262.60 #>  [9,] 153875.69      0.00 135498.20 102515.35  65354.70 128402.20  62143.14 #> [10,]      0.00 153875.69 141534.10 197002.96 196263.22  31190.18 207552.27 #>            [,8]      [,9]     [,10] #>  [1,] 126489.10  24610.78      0.00 #>  [2,] 121412.72      0.00  24610.78 #>  [3,]      0.00 121412.72 126489.10 #>  [4,] 100310.40 127870.95 148409.63 #>  [5,]  84639.96 136581.25 125505.43 #>  [6,]  83700.88 137008.98 154968.89 #>  [7,]  83056.06 174831.28 188855.18 #>  [8,]  70209.61 191424.33 194817.22 #>  [9,]  69035.72  72789.93  89636.58 #> [10,] 115523.55 149774.17 134272.26 #> attr(,\"class\") #> [1] \"matrix\" \"array\"  distance_haversine_matrix(x, y) #>            [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>  [1,] 134923.24  89647.97 195643.97 189101.44 154976.98 126199.22 148314.34 #>  [2,] 150401.00  72896.21 192354.10 175188.13 137104.27 137277.27 127839.24 #>  [3,] 115417.79  69408.06  70567.05  82966.95  83748.67  84572.11 100500.02 #>  [4,] 207566.40  62073.77 145937.86  74612.47  25356.71 179015.27      0.00 #>  [5,]  31155.92 128649.02 113410.65 165636.07 166339.64      0.00 179015.27 #>  [6,] 196175.53  65351.60 121947.05  49979.34      0.00 166339.64  25356.71 #>  [7,] 196788.75 102767.34  87782.76      0.00  49979.34 165636.07  74612.47 #>  [8,] 141483.13 136256.37      0.00  87782.76 121947.05 113410.65 145937.86 #>  [9,] 154042.39      0.00 136256.37 102767.34  65351.60 128649.02  62073.77 #> [10,]      0.00 154042.39 141483.13 196788.75 196175.53  31155.92 207566.40 #>            [,8]      [,9]     [,10] #>  [1,] 126950.63  24594.88      0.00 #>  [2,] 121983.92      0.00  24594.88 #>  [3,]      0.00 121983.92 126950.63 #>  [4,] 100500.02 127839.24 148314.34 #>  [5,]  84572.11 137277.27 126199.22 #>  [6,]  83748.67 137104.27 154976.98 #>  [7,]  82966.95 175188.13 189101.44 #>  [8,]  70567.05 192354.10 195643.97 #>  [9,]  69408.06  72896.21  89647.97 #> [10,] 115417.79 150401.00 134923.24 #> attr(,\"class\") #> [1] \"matrix\" \"array\"   distance_euclidean_pairwise(x, y) #>  [1] 1.2133944 0.6555834 0.6346275 0.6710052 1.4959453 1.4959453 0.6710052 #>  [8] 0.6346275 0.6555834 1.2133944 distance_hausdorff_pairwise(x, y) #>  [1] 1.2133944 0.6555834 0.6346275 0.6710052 1.4959453 1.4959453 0.6710052 #>  [8] 0.6346275 0.6555834 1.2133944 distance_vicenty_pairwise(x, y) #>  [1] 134272.26  72789.93  70209.61  74201.85 166378.62 166378.62  74201.85 #>  [8]  70209.61  72789.93 134272.26 distance_geodesic_pairwise(x, y) #>  [1] 134272.26  72789.93  70209.61  74201.85 166378.62 166378.62  74201.85 #>  [8]  70209.61  72789.93 134272.26 distance_haversine_pairwise(x, y) #>  [1] 134923.24  72896.21  70567.05  74612.47 166339.64 166339.64  74612.47 #>  [8]  70567.05  72896.21 134923.24"},{"path":"/reference/expand_geoms.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand Geometries — expand_geoms","title":"Expand Geometries — expand_geoms","text":"Expands geometries list vectors components.","code":""},{"path":"/reference/expand_geoms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand Geometries — expand_geoms","text":"","code":"expand_geoms(x)"},{"path":"/reference/expand_geoms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand Geometries — expand_geoms","text":"x object class rsgeo","code":""},{"path":"/reference/expand_geoms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand Geometries — expand_geoms","text":"list rsgeo vectors containing original geometry's components new vector.","code":""},{"path":"/reference/expand_geoms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Expand Geometries — expand_geoms","text":"rs_MULTIPOINT expands vector points rs_LINESTRING expands vector points rs_MULTILINESTRING expands vector linestrings rs_POLYGON expands vector linestrings rs_MULTIPOLYGON expands vector polygons wish single vector returned, pass results flatten_geoms().","code":""},{"path":"/reference/expand_geoms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expand Geometries — expand_geoms","text":"","code":"mpnts <- geom_multipoint(runif(10), runif(10), rep.int(1:5, 2)) expand_geoms(mpnts) #> [[1]] #> <rs_POINT[2]> #> [1] Point(Coord { x: 0.651673766085878, y: 0.4935413070488721 }))   #> [2] Point(Coord { x: 0.3823879570700228, y: 0.10794362588785589 })) #>  #> [[2]] #> <rs_POINT[2]> #> [1] Point(Coord { x: 0.9347052311059088, y: 0.48208011547103524 })) #> [2] Point(Coord { x: 0.3861140925437212, y: 0.6684667381923646 }))  #>  #> [[3]] #> <rs_POINT[2]> #> [1] Point(Coord { x: 0.12555509596131742, y: 0.1862176014110446 })) #> [2] Point(Coord { x: 0.86969084572047, y: 0.723710946040228 }))     #>  #> [[4]] #> <rs_POINT[2]> #> [1] Point(Coord { x: 0.21214252128265798, y: 0.5995658254250884 }))  #> [2] Point(Coord { x: 0.013390333158895373, y: 0.7942398607265204 })) #>  #> [[5]] #> <rs_POINT[2]> #> [1] Point(Coord { x: 0.26722066872753203, y: 0.8273733186069876 })) #> [2] Point(Coord { x: 0.3403489966876805, y: 0.4112744296435267 }))  #>"},{"path":"/reference/extreme_coords.html","id":null,"dir":"Reference","previous_headings":"","what":"Find extremes — extreme_coords","title":"Find extremes — extreme_coords","text":"Find extremes","code":""},{"path":"/reference/extreme_coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find extremes — extreme_coords","text":"","code":"extreme_coords(x)"},{"path":"/reference/extreme_coords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find extremes — extreme_coords","text":"x geometry","code":""},{"path":"/reference/flatten_geoms.html","id":null,"dir":"Reference","previous_headings":"","what":"Flatten a list of rsgeo vectors — flatten_geoms","title":"Flatten a list of rsgeo vectors — flatten_geoms","text":"Flatten list rsgeo vectors","code":""},{"path":"/reference/flatten_geoms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flatten a list of rsgeo vectors — flatten_geoms","text":"","code":"flatten_geoms(x)"},{"path":"/reference/flatten_geoms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flatten a list of rsgeo vectors — flatten_geoms","text":"x object class rsgeo","code":""},{"path":"/reference/flatten_geoms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flatten a list of rsgeo vectors — flatten_geoms","text":"","code":"pnts <- replicate(   10,   geom_point(runif(1), runif(1)),   simplify = FALSE )  flatten_geoms(pnts) #> <rs_POINT[10]> #>  [1] Point(Coord { x: 0.8209462941158563, y: 0.6470601938199252 }))    #>  [2] Point(Coord { x: 0.7829327622894198, y: 0.5530363116413355 }))    #>  [3] Point(Coord { x: 0.5297195801977068, y: 0.7893562316894531 }))    #>  [4] Point(Coord { x: 0.023331202333793044, y: 0.47723006503656507 })) #>  [5] Point(Coord { x: 0.7323137386702001, y: 0.6927315564826131 }))    #>  [6] Point(Coord { x: 0.4776196221355349, y: 0.8612094768323004 }))    #>  [7] Point(Coord { x: 0.4380971072241664, y: 0.24479727703146636 }))   #>  [8] Point(Coord { x: 0.07067904714494944, y: 0.09946616017259657 }))  #>  [9] Point(Coord { x: 0.3162717071827501, y: 0.5186342631932348 }))    #> [10] Point(Coord { x: 0.6620050764176995, y: 0.4068301871884614 }))"},{"path":"/reference/frechet_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Frechet Distance — frechet_distance","title":"Calculate Frechet Distance — frechet_distance","text":"Given two LineStrings compare thier similarity calculating Fréchet distance.","code":""},{"path":"/reference/frechet_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Frechet Distance — frechet_distance","text":"","code":"frechet_distance(x, y)"},{"path":"/reference/frechet_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Frechet Distance — frechet_distance","text":"x object class rs_LINESTRING y object class rs_LINESTRING","code":""},{"path":"/reference/frechet_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Frechet Distance — frechet_distance","text":"numeric vector","code":""},{"path":"/reference/frechet_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Frechet Distance — frechet_distance","text":"","code":"x <- geom_linestring(1:10, runif(10, -1, 1)) y <- geom_linestring(1:10, runif(10, -3, 3)) frechet_distance(x, y) #> [1] 2.5964"},{"path":"/reference/geometry.html","id":null,"dir":"Reference","previous_headings":"","what":"Create geometry — geom_point","title":"Create geometry — geom_point","text":"Create geometry Create list points Given matrix x, y coordinates, create list points","code":""},{"path":"/reference/geometry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create geometry — geom_point","text":"","code":"geom_point(x, y)  geom_points(x)  geom_points_xy(x, y)  geom_points_matrix(x)  geom_multipoint(x)  geom_multipoints(x)  geom_polygon(x)  geom_polygons(x)  geom_multipolygon(x)  geom_multipolygons(x)  geom_linestring(x)  geom_linestrings(x)  geom_multilinestring(x)  geom_multilinestrings(x)"},{"path":"/reference/haversine_destination.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify a destination point — haversine_destination","title":"Identify a destination point — haversine_destination","text":"Given vector point geometries, bearings, distances, identify destination location.","code":""},{"path":"/reference/haversine_destination.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify a destination point — haversine_destination","text":"","code":"haversine_destination(x, bearing, distance)"},{"path":"/reference/haversine_destination.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify a destination point — haversine_destination","text":"x object class rs_POINT bearing numeric vector specifying degree direction 0 north distance numeric vector specifying distance travel direction specified bearing meters","code":""},{"path":"/reference/haversine_destination.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify a destination point — haversine_destination","text":"object class rs_POINT","code":""},{"path":"/reference/haversine_destination.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify a destination point — haversine_destination","text":"","code":"# create 10 points at the origin pnts <- geom_point(rep(0, 10), rep(0, 10))  # set seed for reproducibiliy set.seed(1)  # generate random bearings bearings <- runif(10, 0, 360)  # generate random distances distances <- runif(10, 10000, 100000)  # find the destinations dests <- haversine_destination(pnts, bearings, distances)  # plot points if (rlang::is_installed(c(\"sf\", \"wk\"))) {   plot(pnts, pch = 3)   plot(dests, add = TRUE, pch = 17) }"},{"path":"/reference/haversine_intermediate.html","id":null,"dir":"Reference","previous_headings":"","what":"Identifies a point between two points — haversine_intermediate","title":"Identifies a point between two points — haversine_intermediate","text":"Identifies location two points great circle along specified fraction distance.","code":""},{"path":"/reference/haversine_intermediate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identifies a point between two points — haversine_intermediate","text":"","code":"haversine_intermediate(x, y, distance)"},{"path":"/reference/haversine_intermediate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identifies a point between two points — haversine_intermediate","text":"x rs_POINT vector y rs_POINT vector distance numeric vector either length 1 length x y","code":""},{"path":"/reference/haversine_intermediate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identifies a point between two points — haversine_intermediate","text":"object class rs_POINT","code":""},{"path":"/reference/haversine_intermediate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identifies a point between two points — haversine_intermediate","text":"","code":"x <- geom_point(1:10, rep(5, 10)) y <- geom_point(1:10, rep(0, 10)) res <- haversine_intermediate(x, y, 0.5) if (rlang::is_installed(c(\"wk\", \"sf\"))) {   plot(     c(x, y, res),     col = sort(rep.int(c(\"red\", \"blue\", \"purple\"), 10)),     pch = 16   ) }"},{"path":"/reference/length.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate LineString Length — length_euclidean","title":"Calculate LineString Length — length_euclidean","text":"given LineString MultiLineString geometry, calculate length. geometries return value NA.","code":""},{"path":"/reference/length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate LineString Length — length_euclidean","text":"","code":"length_euclidean(x)  length_geodesic(x)  length_vincenty(x)  length_haversine(x)"},{"path":"/reference/length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate LineString Length — length_euclidean","text":"x object class rsgeo","code":""},{"path":"/reference/length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate LineString Length — length_euclidean","text":"numeric vector","code":""},{"path":[]},{"path":"/reference/length.html","id":"notes","dir":"Reference","previous_headings":"","what":"Notes","title":"Calculate LineString Length — length_euclidean","text":"Vicenty, Geodeisc, Haversine methods return units meters. Geodesic length always converge accurate Vicenty methods. Haversine uses mean earth radius 6371.088 km. See geo docs details.","code":""},{"path":"/reference/length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate LineString Length — length_euclidean","text":"","code":"set.seed(0) y <- runif(25, -5, 5) x <- 1:25  ln <- geom_linestring(x, y)  length_euclidean(ln) #> [1] 91.41732 length_geodesic(ln) #> [1] 10114260 length_vincenty(ln) #> [1] 10114260 length_haversine(ln) #> [1] 10164090"},{"path":"/reference/line_interpolate_point.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolate a Point on a LineString — line_interpolate_point","title":"Interpolate a Point on a LineString — line_interpolate_point","text":"Finds point lies given fraction along line.","code":""},{"path":"/reference/line_interpolate_point.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolate a Point on a LineString — line_interpolate_point","text":"","code":"line_interpolate_point(x, fraction)"},{"path":"/reference/line_interpolate_point.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolate a Point on a LineString — line_interpolate_point","text":"x object class rs_LINESTRING fraction numeric vector length 1 length x. Must value 0 1 inclusive.","code":""},{"path":"/reference/line_interpolate_point.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpolate a Point on a LineString — line_interpolate_point","text":"object class rs_POINT","code":""},{"path":"/reference/line_interpolate_point.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interpolate a Point on a LineString — line_interpolate_point","text":"","code":"x <- geom_linestring(c(-1, 0, 0), c(0, 0, 1)) line_interpolate_point(x, 0.5) #> <rs_POINT[1]> #> [1] Point(Coord { x: 0.0, y: 0.0 }))"},{"path":"/reference/line_segmentize.html","id":null,"dir":"Reference","previous_headings":"","what":"Segments a LineString into n equal length LineStrings — line_segmentize","title":"Segments a LineString into n equal length LineStrings — line_segmentize","text":"Given LineString, segment n equal length LineStrings. n LineStrings provided MultiLineString can expanded using expand_geoms() consequently flattened using flatten_geoms() desired.","code":""},{"path":"/reference/line_segmentize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Segments a LineString into n equal length LineStrings — line_segmentize","text":"","code":"line_segmentize(x, n)"},{"path":"/reference/line_segmentize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Segments a LineString into n equal length LineStrings — line_segmentize","text":"x object class rs_LINESTRING n integer vector determining number equal length LineStrings create","code":""},{"path":"/reference/line_segmentize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Segments a LineString into n equal length LineStrings — line_segmentize","text":"vector class rs_MULTILINESTRING","code":""},{"path":"/reference/line_segmentize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Segments a LineString into n equal length LineStrings — line_segmentize","text":"","code":"x <- geom_linestring(1:10, runif(10, -1, 1))  segs <- line_segmentize(x, 3)  flatten_geoms(   expand_geoms(segs) ) #> <rs_LINESTRING[3]> #> [1] LineString([Coord { x: 1.0, y: -0.46555866254493594 }, Coord { x: 2.0, y: ... #> [2] LineString([Coord { x: 4.018943076103605, y: -0.21676205444953042 }, Coord... #> [3] LineString([Coord { x: 6.690996001567895, y: -0.12343073387055387 }, Coord..."},{"path":"/reference/locate_point_on_line.html","id":null,"dir":"Reference","previous_headings":"","what":"Locate a Point on a LineString — locate_point_on_line","title":"Locate a Point on a LineString — locate_point_on_line","text":"Calculates fraction LineString's length point closes corresponding point y.","code":""},{"path":"/reference/locate_point_on_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locate a Point on a LineString — locate_point_on_line","text":"","code":"locate_point_on_line(x, y)"},{"path":"/reference/locate_point_on_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Locate a Point on a LineString — locate_point_on_line","text":"x object class rs_LINESTRING y object class rs_POINT","code":""},{"path":"/reference/locate_point_on_line.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Locate a Point on a LineString — locate_point_on_line","text":"numeric vector containing fraction LineString need travelled reach closest point.","code":""},{"path":"/reference/locate_point_on_line.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Locate a Point on a LineString — locate_point_on_line","text":"","code":"x <- geom_linestring(c(-1, 0, 0), c(0, 0, 1)) y <- geom_point(-0.5, 0) locate_point_on_line(x, y) #> [1] 0.25"},{"path":"/reference/plot.rsgeo.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Geometries — plot.rsgeo","title":"Plot Geometries — plot.rsgeo","text":"Plot Geometries","code":""},{"path":"/reference/plot.rsgeo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Geometries — plot.rsgeo","text":"","code":"# S3 method for rsgeo plot(x, ...)"},{"path":"/reference/plot.rsgeo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Geometries — plot.rsgeo","text":"x object class rsgeo ... arguments passed wk::wk_plot()","code":""},{"path":"/reference/plot.rsgeo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Geometries — plot.rsgeo","text":"Plotting geometries utilizes wk::wk_plot(). rust geometries handled first converting sfc object wk::wk_handle() method thus requiring packages plotting.","code":""},{"path":"/reference/predicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial Predicates — contains","title":"Spatial Predicates — contains","text":"Spatial Predicates","code":""},{"path":"/reference/predicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatial Predicates — contains","text":"","code":"contains(x, y)  contains_sparse(x, y)  contains_pairwise(x, y)  intersects(x, y)  intersects_sparse(x, y)  intersects_pairwise(x, y)  within(x, y)  within_sparse(x, y)  within_pairwise(x, y)"},{"path":"/reference/print.html","id":null,"dir":"Reference","previous_headings":"","what":"Printing and formatting — print.point","title":"Printing and formatting — print.point","text":"Printing formatting","code":""},{"path":"/reference/print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Printing and formatting — print.point","text":"","code":"# S3 method for point print(x, width = NULL)  # S3 method for multipoint print(x, width = NULL)  # S3 method for polygon print(x, width = NULL)  # S3 method for multipolygon print(x, width = NULL)  # S3 method for linestring print(x, width = NULL)  # S3 method for multilinestring print(x, width = NULL)"},{"path":"/reference/read_geojson.html","id":null,"dir":"Reference","previous_headings":"","what":"Read GeoJSON file — read_geojson","title":"Read GeoJSON file — read_geojson","text":"Read GeoJson file using geojson crate. function crash geojson files ~ 50mb +. Working though....","code":""},{"path":"/reference/read_geojson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read GeoJSON file — read_geojson","text":"","code":"read_geojson(filepath)"},{"path":"/reference/read_geojson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read GeoJSON file — read_geojson","text":"filepath file path read","code":""},{"path":"/reference/read_geojson.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read GeoJSON file — read_geojson","text":"improve reading speed set --max-ppsize=500000 creating R session.","code":""},{"path":"/reference/rstar_rtree.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an rstar RTree from a vector of geometry — rstar_rtree","title":"Create an rstar RTree from a vector of geometry — rstar_rtree","text":"Create rstar RTree vector geometry","code":""},{"path":"/reference/rstar_rtree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an rstar RTree from a vector of geometry — rstar_rtree","text":"","code":"rstar_rtree(x)"},{"path":"/reference/rstar_rtree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an rstar RTree from a vector of geometry — rstar_rtree","text":"x vector rust geometry","code":""},{"path":"/reference/simplify.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplify Geometry — simplify_geoms","title":"Simplify Geometry — simplify_geoms","text":"Simplifies LineStrings, Polygons, Multi- counterparts.","code":""},{"path":"/reference/simplify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplify Geometry — simplify_geoms","text":"","code":"simplify_geoms(x, epsilon)  simplify_vw_geoms(x, epsilon)  simplify_vw_preserve_geoms(x, epsilon)"},{"path":"/reference/simplify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simplify Geometry — simplify_geoms","text":"x object class rsgeo epsilon tolerance parameter. equal less 0.","code":""},{"path":"/reference/simplify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simplify Geometry — simplify_geoms","text":"Simplify functions use Ramer–Douglas–Peucker algorithm. Functions vw use Visvalingam-Whyatt algorithm. see geo docs.","code":""},{"path":"/reference/simplify_geom.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplfiy Geometries — simplify_geom","title":"Simplfiy Geometries — simplify_geom","text":"Simplfiy Geometries","code":""},{"path":"/reference/simplify_geom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplfiy Geometries — simplify_geom","text":"","code":"simplify_geom(x, epsilon)  simplify_geoms(x, epsilon)  simplify_vw_geom(x, epsilon)  simplify_vw_geoms(x, epsilon)"},{"path":"/reference/topology.html","id":null,"dir":"Reference","previous_headings":"","what":"Binary Predicates — intersects_sparse","title":"Binary Predicates — intersects_sparse","text":"Functions ascertain binary relationship two geometry vectors. Binary predicates provided pairwise sparse matrix.","code":""},{"path":"/reference/topology.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Binary Predicates — intersects_sparse","text":"","code":"intersects_sparse(x, y)  intersects_pairwise(x, y)  contains_sparse(x, y)  contains_pairwise(x, y)  within_sparse(x, y)  within_pairwise(x, y)"},{"path":"/reference/topology.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Binary Predicates — intersects_sparse","text":"x object class rsgeo y object class rsgeo","code":""},{"path":"/reference/vector-compatibility.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal vet — vector-compatibility","title":"Internal vet — vector-compatibility","text":"Internal vet","code":""},{"path":"/reference/wkb.html","id":null,"dir":"Reference","previous_headings":"","what":"WKB Translation — wkb_from_geom","title":"WKB Translation — wkb_from_geom","text":"WKB Translation","code":""},{"path":"/reference/wkb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"WKB Translation — wkb_from_geom","text":"","code":"wkb_from_geom(x)  wkb_from_geoms(x)  wkb_to_geom(x)  wkb_to_geoms(x)"},{"path":"/reference/wkt.html","id":null,"dir":"Reference","previous_headings":"","what":"WKT translation — wkt_to_geom","title":"WKT translation — wkt_to_geom","text":"WKT translation","code":""},{"path":"/reference/wkt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"WKT translation — wkt_to_geom","text":"","code":"wkt_to_geom(x)  wkt_from_geom(x)  wkt_to_geoms(x)  wkt_from_geoms(x)"},{"path":"/news/index.html","id":"rsgeo-010","dir":"Changelog","previous_headings":"","what":"rsgeo 0.1.0","title":"rsgeo 0.1.0","text":"Complete rewrite rsgeo ground . distances matrixes calculated parallel using rayon removes cloning possible reducing overall memory footprint even ","code":""},{"path":"/news/index.html","id":"rsgeo-0009000","dir":"Changelog","previous_headings":"","what":"rsgeo 0.0.0.9000","title":"rsgeo 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
